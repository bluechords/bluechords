type Query {
    info: String!
    user(id: ID!): User
    users(filter: String, orderBy: UserOrderByInput): [User!]!
    song(id: ID!): Song
    songs(skip: Int, first: Int, filter: String, orderBy: SongOrderByInput): [Song!]!
}

type Mutation {
    addSong(name: String!, artist: String, content: String!): Song!
    updateSong(id: ID!, name: String!, artist: String, content: String!): Song
    deleteSong(id: ID!): Song
    signup(email: String!, password: String!): AuthPayload
    login(email: String!, password: String!): AuthPayload
}

type AuthPayload {
    token: String
    user: User
}

type User {
    id: ID!
    email: String!
    songs: [Song!]!
}

type Song {
    id: ID!
    name: String!
    artist: String!
    private: Boolean!
    content: String!
    createdBy: User!
}

enum SongOrderByInput {
    name_ASC
    name_DESC
    artist_ASC
    artist_DESC
    createdAt_ASC
    createdAt_DESC
    updatedAt_ASC
    updatedAt_DESC
}

enum UserOrderByInput {
  email_ASC
  email_DESC
}

